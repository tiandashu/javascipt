
//换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。
// Node.js 中存在 4 类模块（原生模块和3种文件模块），尽管 require 方法极其简单，但是内部的加载却是十分复杂的，其加载优先级也各自不同。如下图所示：
var http = require('event');
console.log(http);

// Node.js模块分为核心模块和文件模块；
// 核心模块是Node.js标准API中提供的模块，可以直接通过require获取；
// 文件模块是存储为单独的文件的模块，可以是javascript代码、Json或编译好的C/C++代码；
// 核心模块拥有最高的加载优先级，如果有模块与其明明冲突，Node.js总是加载核心模块；
// 文件模块如果不显式指定文件模块扩展名，则会按照.js、.json、.node的顺序加上扩展名；
// 文件模块的加载有两种方式，一种是按路径加载，一种是查找node_modules文件夹；
// 文件模块按路径加载又分为按相对路径加载和按绝对路径加载两种；
// 
// 优先加载核心模块；

// 以路径形式加载文件模块： 
// ① 如果显示指定文件模块扩展名，则在该路径下查找该模块是否存在； 
// ② 如果未显示指定文件模块扩展名，则在该路径下，依次查找以.js、.json、.node为扩展名的模块是否存在；

// 既不是核心模块，又不是以路径形式表示的模块，则首先在当前目录的node_modules目录中查找该模块是否存在，若不存在，则继续在其父目录的node_modules目录中查找，反复执行这一过程，直到根目录为止。